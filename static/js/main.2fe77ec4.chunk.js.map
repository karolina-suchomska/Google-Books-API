{"version":3,"sources":["components/Heading.js","components/Search.js","components/Book.js","components/Result.js","components/Home.js","components/App.js","serviceWorker.js","index.js"],"names":["Heading","react_default","a","createElement","className","Search","props","onSubmit","handleCheck","action","type","onChange","handleSearch","placeholder","Book","src","image","alt","title","description","substr","Result","books","map","book","i","components_Book","key","volumeInfo","imageLinks","thumbnail","undefined","index","Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleMoreIndex","e","handleSubmit","setState","value","target","API","concat","state","preventDefault","axios","get","then","results","data","items","nextBooks","toConsumableArray","catch","error","_this2","window","onscroll","innerHeight","scrollY","document","body","offsetHeight","ms","x","Date","y","wait","id","components_Search","components_Result","Component","App","components_Heading","components_Home","Boolean","location","hostname","match","ReactDOM","render","src_components_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2fe77ec4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Heading = () => {\r\n    return ( \r\n        <div className=\"heading\">\r\n            <h1>Google Books Search</h1>\r\n        </div>\r\n     )\r\n}\r\n \r\nexport default Heading;","import React from 'react';\r\n\r\nconst Search = props => {\r\n    return ( \r\n        <form className=\"Search\" onSubmit={props.handleCheck} action=\"\">\r\n            <input \r\n                type = \"text\"\r\n                onChange = {props.handleSearch}\r\n                placeholder = \"Enter title here\"\r\n            />\r\n            <button type=\"submit\">Search</button>\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default Search;","import React from 'react';\r\n\r\nconst Book = (props) => { \r\n    \r\n    return ( \r\n        <div className=\"card\">\r\n            <img src={props.image} alt=\"\" />\r\n            <div className=\"desc\">\r\n                <h2>{props.title}</h2>\r\n                <p>{((props.description) ? (props.description.substr(0, 55)+\"...\") : props.description)}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Book;","import React from 'react';\r\nimport Book from './Book'\r\n\r\nlet noImage = 'https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-image-128.png';\r\n\r\nconst Result = (props) => {\r\n\r\n    return ( \r\n        <div className=\"list\">\r\n            {\r\n               props.books && props.books.map((book, i) => {  \r\n                                              \r\n                    return (\r\n                        <Book\r\n                            key={i}\r\n                            image = {((book.volumeInfo.imageLinks) ? book.volumeInfo.imageLinks.thumbnail : noImage)}                           \r\n                            title={((book.volumeInfo.title) ? book.volumeInfo.title : undefined)}\r\n                            description={((book.volumeInfo.description) ? book.volumeInfo.description : undefined)}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Result;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport Search from './Search';\r\nimport Result from './Result';\r\n\r\nlet index=0;\r\n\r\nfunction wait(ms) {\r\n    var x = new Date();\r\n    var y = null;\r\n    do { y = new Date(); }\r\n    while(y-x < ms);\r\n}\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            books: [],\r\n            value: '',\r\n            error: false,\r\n        }\r\n    }\r\n\r\n    // checks whether the user is on the bottom of the page\r\n    componentDidMount() {\r\n        window.onscroll = (e) => {\r\n            if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {\r\n                return (\r\n                    this.handleMoreIndex(e),\r\n                    wait(500)\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    // increases the index value\r\n    handleMoreIndex = (e) => {\r\n        index = index + 10;\r\n        this.handleSubmit(e)           \r\n    }\r\n\r\n    // gets the value entered in the input\r\n    handleSearch = e => {\r\n        this.setState({\r\n          value: e.target.value\r\n        });\r\n    }\r\n\r\n    // checks whether the word has been changed\r\n    handleCheck = e => {\r\n        if(index>0) {\r\n            return (\r\n                index=0,\r\n                this.handleSubmit(e)\r\n            );\r\n        }\r\n        this.handleSubmit(e);\r\n    }\r\n\r\n    // gets results from API\r\n    handleSubmit = e => {   \r\n    const API = `https://www.googleapis.com/books/v1/volumes?q=${this.state.value}`;\r\n    const paramteresAPI = `&printType=books&startIndex=`;\r\n\r\n    e.preventDefault();\r\n    axios.get(API+paramteresAPI+index)\r\n        .then(results => {\r\n            if(index===0) {\r\n                this.setState({\r\n                    books: results.data.items,\r\n                })\r\n            }\r\n            else if(index>0) {\r\n                const nextBooks = results.data.items\r\n                \r\n                this.setState({\r\n                books: [\r\n                    ...this.state.books,\r\n                    ...nextBooks,\r\n                ],\r\n                });\r\n            }\r\n        })\r\n        .catch(error => {\r\n            this.setState({\r\n                error,\r\n            })\r\n        });\r\n    }\r\n   \r\n    render() {\r\n        return (\r\n            <div className=\"home\" id=\"Home\">\r\n                <Search \r\n                    handleCheck={this.handleCheck} \r\n                    handleSearch={this.handleSearch} \r\n                />\r\n                <Result books={this.state.books} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\nimport './App.css';\nimport Heading from './Heading'\nimport Home from './Home'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Heading />\n        <Home />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}